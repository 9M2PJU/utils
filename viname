#!/bin/bash
# Uses an editor to rename or move files.

usage() {
	cat >&2 <<EOF
Usage: $(basename "$0") [-h] [-f] [-b] [-n] [-p] [FILE]...
Options:
  -h      Display this help message
  -f      Work with the file's full path
  -b      Work with the file's basename
  -n      Dry run (don't move the file)
  -p      Create new directories as necessary
EOF
}

if [[ $# = 0 ]] ; then
	echo >&2 "No arguments."
	usage
	exit 1
fi

if [[ "$1" = -h ]] ; then
	usage
	exit 1
fi

# Default behavior depends on the command name.
#  - 'viname' and others work with the file's basename
#  - 'vimv' works with the file's full path
if [[ "$(basename "$0")"  = vimv ]] ; then
	use_full_path=true
else
	use_full_path=false
fi
dry_run=false
make_parents=false

for file ; do
	case "$file" in
		-f)
			use_full_path=true
			continue
			;;
		-b)
			use_full_path=false
			continue
			;;
		-n)
			dry_run=true
			continue
			;;
		-p)
			make_parents=true
			continue
			;;
	esac

	if [[ ! -f "$file" && ! -d "$file" ]] ; then
		echo >&2 "'$file' does not exist."
		continue
	fi

	basename=$(basename "$file")
	dirname=$(dirname "$file")
	#editor="${EDITOR-:vi}"
	editor=vi

	temp=$(mktemp)

	if $use_full_path ; then
		echo "$file" > "$temp"
	else
		echo "$basename" > "$temp"
	fi

	eval $editor "$temp"

	if $use_full_path ; then
		new_file="$(< "$temp")"
	else
		new_file="$dirname/$(< "$temp")"
	fi

	if ! $dry_run ; then
		if $make_parents ; then
			mkdir -p "$(dirname "$new_file")"
		fi
		mv "$file" "$new_file"
	fi

	if [[ $? = 0 ]] ; then
		echo "$file -> $new_file"
	fi

	rm "$temp"
done
