#!/bin/bash
# Checks for dirty working directories or unpushed commits in git repositories
# by Evan Teitelman <teitelmanevan@gmail.com>

# Only checks these remotes
remotes=(origin locserv github googlecode)
# Checks these repos
repos=("$HOME" "$HOME/fil" "$HOME/ecad/other")
# Searches for repos here
search=("$HOME/cod")
# Only search X directories deep
search_depth=3

only_dirty=false
extra_newline=true

for arg ; do
	case "$arg" in
		-o) only_dirty=true ;;
		-s) extra_newline=false ;;
		*) echo "Invalid argument." ;;
	esac
done

# Search for repos
for search_repo in "${search[@]}" ; do
	while read repo ; do
		repos+=("$repo/..")
	done < <(find "$search_repo" -maxdepth "$search_depth" -path "$HOME/ecod" \
	         -prune -o -name '.git' -type d)
done

# Print headers
printf "%-30s%-12s" Name WD
for remote in "${remotes[@]}" ; do
	# One for each remote
	printf "%-12s" "$remote"
done
printf "untested\n"

for repo in "${repos[@]}" ; do (
	if ! cd "$repo" ; then
		echo >&2 "Could not change to '$repo'."
		continue
	fi

	# Repo name
	reponame=$(basename "$(realpath "$repo")")

	# Working directory
	if [[ -n $(git diff --exit-code 2>/dev/null) ]] ; then
		# Dirty
		statuses=("&")
	else
		# Clean
		statuses=("^")
	fi

	# Remotes
	for remote in "${remotes[@]}" ; do
		if ! git remote | grep -m1 $remote &>/dev/null ; then
			# Repo doesn't have remote
			statuses+=(".")
		elif git diff --exit-code ${remote}/master..master &>/dev/null ; then
			# No unpushed commits
			# TODO: make this handle multiple branches
			statuses+=("^")
		else
			# Unpushed commits
			statuses+=("&")
		fi
	done

	# Skip clean items if only dirty is set
	if $only_dirty ; then
		skip=true
		for item in "${statuses[@]}" ; do
			if [[ "$item" == "&" ]] ; then
				skip=false
				break
			fi
		done
		$skip && continue
	fi

	# Print repo name
	printf "%-30s" "$reponame"
	# Print statuses
	for status in "${statuses[@]}" ; do
		printf "%-12s" "$status"
	done

	# Print untested remotes
	while read remote ; do
		if [[ ! *${remotes[@]}* =~ ${remote} ]] ; then
			printf "%-6s" "$remote"
		fi
	done < <(git remote)

	printf '\n'
	$extra_newline && printf '\n'
) done

# sh syntax highlighting doesn't support subshells
# vim: set ft=zsh:
