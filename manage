#!/bin/bash

root="$HOME"
rs_flags="-avzy --progress -e 'ssh'"
remote="tixod.com"

sec_dir="sec"
sec_tar=".sec.tar.gz"
sec_asc="${sec_tar}.asc"

all=(${root}/ro/ ${root}/med/ ${root}/ela/ ${sec_asc} ${root}/cod/ext/)

transfer_out() {
	more_flags=${@}
	for item in ${all[@]} ; do
		echo "Backing up $(basename ""${item}"")."
		remote_dir=$item
		rsync ${rs_flags} ${more_flags} "${item}" "${remote}:${remote_dir}"
	done
}

transfer_in() {
	more_flags=${@}
	for item in ${all[@]} ; do
		echo "Backing up $(basename ""${item}"")."
		remote_dir=$item
		rsync ${rs_flags} ${more_flags} "${remote}:${remote_dir}" "${item}"
	done
}

unset DISPLAY
if [[ $1 == all ]] ; then
	if [[ $2 == "in" ]] ; then
		transfer_in
	elif [[ $2 == "out" ]] ; then
		transfer_out
	elif [[ $2 == "out-sync" ]] ; then
		transfer_out --delete-after
	elif [[ $2 == "in-sync" ]] ; then
		transfer_in --delete-after
	fi
elif [[ $1 == sec ]] ; then
	cd ${root}

	if [[ $2 == "e" ]] ; then
		tar -czf ${sec_tar} ${sec_dir} &&
			gpg -ea -r evan ${sec_tar} &&
			srm ${sec_tar}
		echo
	elif [[ $2 == "d" ]] ; then
		gpg ${sec_asc} &&
			tar -xzf ${sec_tar} &&
			srm ${sec_tar}
		echo
	elif [[ $2 == "c" ]] ; then
		echo "Removing ${sec_dir}/..."
		srm -rf ${sec_dir}
		echo "Removing ${sec_tar}..."
		srm ${sec_tar}
		echo
	elif [[ $2 == "l" ]] ; then
		gpg ${sec_asc} &&
			tar -tzf ${sec_tar} &&
			srm ${sec_tar}
		echo
	fi

	[[ -d ${sec_dir} ]] && echo "Warning: unencrypted data at ${sec_dir}/ exists."
	[[ -f ${sec_tar} ]] && echo "Warning: unencrypted data at ${sec_tar}/ exists."
	[[ -f ${sec_asc} ]] && echo "Info: ${sec_asc} exists."
else
	echo "Invalid item. Items:"
	echo "  all"
	echo "  sec"
fi
