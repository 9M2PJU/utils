#!/bin/bash

mnt=/mnt/kindle
do_umount=true

backup_dir=$HOME/bu/kindle

die() {
	err "$*"
	exit 1
}

err() {
	echo >&2 "ERROR: $*"
}

usage() {
	cat <<EOF
usage: kin [OPTIONS] ACTION [ACTION_ARGS]

  OPTIONS
  -m <mnt>           set mountpoint (default: /mnt/kindle)
  -d <dev>           set block device (default: auto)
  -n                 do not unmount on exit
  
  ACTION
  ls                 list books
  cp <book>          copy a book onto the device
  rm <book>          remove a book from the device
  purge <book>       remove a book and its *.?ds/*.sdr files from the device
  bu                 backup the device to $backup_dir
EOF
}

parse_args() {
	while (( $# )) ; do
		case "$1" in
			-m)
				mnt=$2
				shift
				;;
			-d)
				blk=$2
				shift
				;;
			-n)
				do_umount=false
				;;
			ls)
				action=ls
				book=$2
				shift
				;;
			cp)
				action=cp
				book=$2
				book_to=$3
				shift; shift
				;;
			rm)
				action=rm
				book=$2
				shift
				;;
			purge)
				action=purge
				book=$2
				shift
				;;
			bu|backup)
				action=backup
				;;
			*)
				usage
				exit 1
				;;
		esac
		shift
	done

	if [[ -z "$action" ]] ; then
		usage
		exit 1
	fi
}

check_root() {
	if (( $EUID != 0 )) ; then
		echo >&2 'must be root.'
		exit 1
	fi
}

cleanup() {
	$do_umount || return

	umount "$mnt"
	[[ -d "$mnt" ]] && rmdir "$mnt"
}

do_mount() {
	trap cleanup EXIT

	# Auto-detect device
	if [[ -z "$blk" ]] ; then
		blk=$(blkid | grep 'LABEL="Kindle"' | head -n1 | cut -d: -f1)
	fi

	mkdir -p "$mnt"
	mount -o sync "$blk" "$mnt" || die 'mount failed.'

	echo "$blk mounted to $mnt."
}

kin_ls() {
	local item=$1
	shift
	ls --color=auto "$mnt/documents/$item" "$@"
}

do_ls() {
	kin_ls "$book"
}

do_cp() {
	cp -v "$book" "$mnt/documents/$book_to"
}

do_rm() {
	rm -vf "$mnt/documents/$book"
	kin_ls
}

do_purge() {
	rm -vrf "$mnt/documents/$book"{,.sdr}
}

do_backup() {
	echo 'backing up...'

	mkdir -p "$backup_dir"
	rsync --delete-after -a "$mnt/" "$backup_dir"

	ln -sf 'documents/My Clippings.txt' "$backup_dir/clippings"

	echo "backup size: $(du -hs "$backup_dir" | cut -d$'\t' -f1)"
}

main() {
	parse_args "$@"
	check_root
	do_mount

	do_$action
}

main "$@"
