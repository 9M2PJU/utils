#!/usr/bin/perl
# Manages virtual machines.
# TODO: finish dhcp
# TODO: multiple cdrom args, etc
# TODO: make netdriver opts
# TODO: support multiple netdrivers (separate -device and -netdev parts in args)
# TODO: NAT? http://wiki.qemu.org/Documentation/Networking/NAT
# TODO: no-persist mode
# https://www.suse.com/documentation/sles11/book_kvm/?page=/documentation/sles11/book_kvm/data/cha_qemu_running_networking.html

use strict;
use warnings;
use autodie;
use English;
use v5.20;
use Getopt::Long qw( :config posix_default bundling no_ignore_case );
use File::Path qw( mkpath );
use File::Temp qw( tempfile );

sub needs_root {
	my $msg = shift;
	if ($EUID != 0) {
		die "$msg needs root.";
	}
}

# See usage for more info.
my %PRESETS = (
	archinstall    => { subdir => 'archinstall', display => 'curses', image => 'archinstall.iso' },
	blackarch      => { subdir => 'blackarch', image => 'blackarch.iso' },
	live           => { subdir => 'live', image => 'live.iso' },
	tails          => { subdir => 'tails', cdrom => 'tails.iso' },
	metasploitable => { subdir => 'metasploitable', maindisk => 1 },
	# TODO: sort out virtio drivers for windows
	'xp-home'      => { subdir => 'xp-home-sp1', maindisk => 1, iodriver => 'ide', networks => 'none', netdriver => 'e1000' },
	'xp-pro3'      => { subdir => 'xp-pro-sp3', maindisk => 1, iodriver => 'ide', networks => 'none', netdriver => 'e1000' },
	'seven'        => { subdir => 'seven', maindisk => 1, iodriver => 'ide', netdriver => 'e1000' },
);

my %DEFAULTS = (
	arch      => 'x86_64',
	kvm       => 1,
	mem       => '6G',
	smp       => '1',
	bootopts  => 'order=dc',
	display   => 'sdl',
	tablet    => 1,
	# TODO: add usbdevice support when we add multi-opts
	#usbdevice => '<none>',
	networks  => 'user',
	netdriver => 'virtio-net',
	#dhcp      => '<none>',
	share     => 'none',
	basedir   => $ENV{HOME} . '/vm',
	#subdir   => '<none>',
	maindisk  => 0,
	makemain  => 0,
	mainsize  => '20G',
	snapshot  => 1,
	#snaplist  not a setting
	#revert    not a setting
	#cdrom    => '<none>',
	#drives   => '<none>',
	iodriver  => 'virtio',
	#image    => '<none>',
);

my %NETWORKS;
my %DISPLAYS;
sub usage {
# TODO: enumerate possible values for items
	print <<HELP;
usage: vm [options] [preset]

Parameters (+ requires a value, : may have a value):
 NAME       DEFAULT     FLAG  OPTIONS
 basedir    ~/vm        -v+   directory name
 subdir     <none>      -o+   directory name

BASE SYSTEM
 arch       x86_64      -a+   various
 kvm        true        -k    (toggle)
 mem        6G          -m+   various
 smp        1           -s+   various
 bootopts   order=dc    -B+   see qemu(1)

DISPLAY
 display    sdl         -d+   various

PERIPHERALS
 tablet     1           -T    (toggle)
 usbdevice  <none>      -U    see qemu(1)

NETWORK
 networks   user        -n+   various (comma-separated, options colon separated)
 netdriver  virtio-net  -N    see qemu -device help
 dhcp       <none>      -D:   dhcp range. uses net default range if no value.
 share      none        -H:   smb, virtfs, none

MAINDISK
 maindisk   false       -i    (toggle)
 makemain   false       -C    (toggle)
 mainsize   20G         -z    size of maindisk
 snapshot   true        -S    (toggle)
 snaplist               -L    (action)
 revert     <none>      -R:   snapshot to revert to (if no value, revert one back)
 snapapply  <none>      -A:   snapshot to apply (if no value, apply one back)

OTHER MEDIA
 cdrom      <none>      -c+   cdrom file
 drives     <none>      -r+   comma-separated drive files (e.g. /dev/sda)
 iodriver   virtio      -I+   virtio, ide, scsi, sd, others
 image      <none>      -f+   image file

META
 passon     <none>      -P+   colon-separated flags to pass on. first dash is added.
 viewcmd    0           -V    (toggle)
 help       0           -h    (toggle)

Presets:
HELP

	for my $preset_name (keys %PRESETS) {
		my %preset = %{$PRESETS{$preset_name}};
		print " $preset_name: ";
		print join ', ', map { "$_ => $preset{$_}" } keys %preset;
		say '';
	}
}

my %opts;
GetOptions(\%opts,
           'basedir|v=s',
           'subdir|o=s',
           'arch|a=s',
           'kvm|k!',
           'mem|m=s',
           'smp|s=s',
           'bootopts|B=s',
           'display|d=s',
           'tablet|T!',
           'networks|n=s',
           'netdriver|N=s',
           'share|H=s',
           'maindisk|i!',
           'makemain|C!',
           'mainsize|z!',
           'snapshot|S:s',
           'snaplist|L',
           'revert|R:s',
           'cdrom|c=s',
           'drives|r=s',
           'iodriver|I=s',
           'image|f=s',
           'passon|P=s',
           'viewcmd|V!',
           'help|h');

# We handle help down here because &usage lists networks and displays.
if (defined $opts{help}) {
	&usage;
	exit;
}

# Handle preset.
my %preset;
if ($#ARGV >= 0) {
	my $preset_name = $ARGV[0];
	my $preset = $PRESETS{$preset_name};
	if (!$preset) {
		die "invalid preset: $preset_name"
	}
	%preset = %$preset;
}

# Merge in the defaults and preset.
my %settings = (%DEFAULTS, %preset, %opts);

my $vmdir;
if (defined $settings{subdir}) {
	$vmdir = "$settings{basedir}/$settings{subdir}";
} else {
	$vmdir = '.';
}

# This is the argument list passed to qemu.
my @args;

# -----------------------------------------------------------------------------
# <BASE SYSTEM>
# -----------------------------------------------------------------------------
if ($settings{kvm}) {
	needs_root 'KVM';
	push @args, '-enable-kvm';
}

push @args, '-m', $settings{mem};

push @args, '-smp', $settings{smp};

push @args, '-boot', $settings{bootopts};
# -----------------------------------------------------------------------------
# </BASE SYSTEM>
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# <DISPLAY>
# -----------------------------------------------------------------------------
%DISPLAYS = (
	sdl     => ['-vga', 'std', '-display', 'sdl'],
	spice   => ['-vga', 'qxl', '-spice', 'port=5900,addr=127.0.0.1,disable-ticketing'],
	curses  => ['-vga', 'std', '-display', 'curses'],
	gtk     => ['-vga', 'std', '-display', 'gtk'],
	console => ['-nographic'],
	none    => ['-vga', 'none', '-display', 'none'],
);

my $display = $DISPLAYS{$settings{display}};
die "invalid display: $settings{display}" if (!$display);
push @args, @$display;
# -----------------------------------------------------------------------------
# </DISPLAY>
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# </PERIPHERALS>
# -----------------------------------------------------------------------------
if ($settings{tablet}) {
	push @args, '-usbdevice', 'tablet';
}
# -----------------------------------------------------------------------------
# </PERIPHERALS>
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# <NETWORK>
# -----------------------------------------------------------------------------
if ($settings{netdriver} =~ /virtio-net/) {
	needs_root 'virtio-net';
}

sub dhcp {
	my ($if, $range) = @_;

    system 'dnsmasq',
	  '--strict-order',
	  "--interface=$if",
	  '--except-interface=lo',
	  #"--listen-address=192.168.0.1",
	  '--bind-interfaces',
	  "--dhcp-range=$range",
	  '--conf-file=/dev/null',
	  "--pid-file=/var/run/qemu-dnsmasq-$if.pid",
	  "--dhcp-leasefile=/var/run/qemu-dnsmasq-$if.leases",
	  '--dhcp-no-override';
}

sub dhcp_kill {
	my ($if) = @_;

	open my ($pid_file), '<', "/var/run/qemu-dnsmasq-$if.pid" or die $!;
	my $pid = <$pid_file>;
	kill 'TERM', int($pid);
}

# TODO: replace this with something that auto-increments
sub random_name {
	my $name = shift;
	$name .= int rand 99999;
	# trim due to ifname limit
	# TODO: adjust to IFNAMSIZ?
	$name = substr $name, 0, 15;
	return $name;
}

sub net_pre_hook_tor {
	my $network = shift;

	# tor
	system qq( systemctl start tor );

	# bridge
	system qq( brctl addbr $network->{if} );
	system qq( ip link set $network->{if} up );
	system qq( ip addr add 192.168.0.1/24 dev $network->{if} );

	# dhcp
	dhcp $network->{if}, '192.168.0.2,192.168.0.2';

	# rinetd
	my ($rinetd_conf, $rinetd_conf_name) = tempfile();
	print $rinetd_conf <<EOF;
192.168.0.1     9050            127.0.0.1       9050
EOF
	system qq( rinetd -c $rinetd_conf_name );
}

sub net_post_hook_tor {
	my $network = shift;
	my $pid;

	# rinetd
	open my $rinetd_pid_file, '<', '/var/run/rinetd.pid';
	$pid = <$rinetd_pid_file>;
	kill 'TERM', $pid;

	# dhcp
	dhcp_kill $network->{if};

	# bridge
	system qq( ip link set $network->{if} down );
	system qq( brctl delbr $network->{if} );

	# tor
	system qq( systemctl stop tor );
}

sub net_pre_hook_isolated {
	my $network = shift;

	# bridge
	system qq( brctl addbr $network->{if} );
	system qq( ip link set $network->{if} up );
	# TODO: make this address configurable... -D
	system qq( ip addr add 10.13.13.1/24 dev $network->{if} );
	system qq( ip route add 10.13.13.2/32 dev $network->{if} );

	# dhcp
	dhcp $network->{if}, '10.13.13.2,10.13.13.2';
}

sub net_post_hook_isolated {
	my $network = shift;

	# dhcp
	dhcp_kill $network->{if};

	# bridge
	system qq( ip link set $network->{if} down);
	system qq( brctl delbr $network->{if});
}

%NETWORKS = (
	# needs_root, pre_hook, post_hook, netdev, device, dhcp_range
	user     => { netdev => ['-netdev', "user,id=%ID%"],
	              device => ['-device', "$settings{netdriver},netdev=%ID%"] },
	restrict => { netdev => ['-netdev', 'user,id=%ID%,restrict=on'],
	              device => ['-device', "$settings{netdriver},netdev=%ID%"] },
	isolated => { needs_root => 1, pre_hook => \&net_pre_hook_isolated, post_hook => \&net_post_hook_isolated,
	              netdev => ['-netdev', "bridge,id=%ID%,br=%IF%"],
	              device => ['-device', "$settings{netdriver},netdev=%ID%"] },
	bridge   => { needs_root => 1, netdev => ['-netdev', "bridge,id=%ID%"],
	              device => ['-device', "$settings{netdriver},netdev=%ID%"] },
	tor      => { needs_root => 1, pre_hook => \&net_pre_hook_tor, post_hook => \&net_post_hook_tor,
	              netdev => ['-netdev', 'bridge,id=%ID%,br=%IF%'],
                  device => ['-device', "$settings{netdriver},netdev=%ID%"] },
	none     => { netdev => ['-net', 'none'], device => [] },
	dump     => { netdev => ['-net', "dump,file=$vmdir/dump.pcap"] },
);

my $sharedir = "$vmdir/shared";
if ($settings{share} eq 'smb') {
	mkpath "$sharedir";
	# TODO: stop giving this its own device...
	#push @args, '-netdev', "user,restrict=on,smb=$sharedir,id=share", '-device', "$settings{netdriver},netdev=share";
	push @args, '-netdev', "user,smb=$sharedir,id=share", '-device', "$settings{netdriver},netdev=share";
} elsif ($settings{share} eq 'virtfs') {
	mkpath "$sharedir";
	push @args, '-virtfs', "local,path=$sharedir,security_model=mapped-file,mount_tag=share";
} elsif ($settings{share} eq 'none') {
	# do nothing
} else {
	die "invalid share type: $settings{share}";
}

my @networks = split /,/, $settings{networks};

foreach my $network_raw (@networks) {
	my ($network_name, @options) = split /:/, $network_raw;

	my $network = $NETWORKS{$network_name};
	if (!$network) {
		die "invalid network: $network_name";
	}
	if ($network->{needs_root}) {
		needs_root "network $network_name";
	}

	my $id = random_name 'net';
	my $if = random_name "q$network_name";
	$network->{if} = $if;

	my @netdev = @{$network->{netdev}};
	my @device = @{$network->{device}};
	for (@netdev, @device) {
		s/%ID%/$id/g;
		s/%IF%/$if/g;
	}

	$netdev[-1] .= ',' . join ',', @options;
	push @args, @netdev, @device;
}
# -----------------------------------------------------------------------------
# </NETWORK>
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# <MAINDISK>
# -----------------------------------------------------------------------------
my $maindisk = "$vmdir/maindisk.qcow2";

if ($settings{maindisk}) {
	if (!-e $maindisk) {
		if ($settings{makemain}) {
			system qq( qemu-img create -f qcow2 $maindisk $settings{mainsize} );
		} else {
			die "maindisk ($maindisk) does not exist. use -C to create it."
		}
	} elsif (!-r $maindisk) {
		die "could not read maindisk ($maindisk)";
	}

	# Handle snaplist command.
	if (defined $opts{snaplist}) {
		# TODO: test
		system qq( qemu-img snapshot -l $maindisk );
		exit;
	}

	my $last_snap = `qemu-img snapshot -l $maindisk | tail -n1` =~ /^([0-9]+)/;

	# Handle revert command.
	if (defined $opts{revert}) {
		my $snap;

		if ($opts{revert} eq '') {
			$snap = $last_snap;
		} else {
		    $snap = $opts{revert};
		}

		for $snap ($snap + 1..$last_snap) {
		    system qq( qemu-img snapshot -d $snap $maindisk );
		}
		exit;
	}

	# Handle snapapply command.
	if (defined $opts{snapapply}) {
		my $snap;

		$snap = $opts{revert};

		for $snap ($snap..$last_snap) {
		    system qq( qemu-img snapshot -d $snap $maindisk );
		}
		exit;
	}

	system qq( qemu-img snapshot -c boot $maindisk );

	# TODO: support device-specific iodrivers   e.g. /dev/sda:ide
	push @args, '-drive', "file=$maindisk,cache=none,if=$settings{iodriver}"
}
# -----------------------------------------------------------------------------
# </MAINDISK>
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# <OTHER MEDIA>
# -----------------------------------------------------------------------------
if (defined $settings{cdrom}) {
	push @args, '-cdrom', "$vmdir/$settings{cdrom}";
}
if (defined $settings{drives}) {
	my @drives = split /,/, $settings{drives};
	push @args, map { ('-drive', "file=$_,cache=none,if=virtio") } @drives;
}
if (defined $settings{image}) {
	push @args, "$vmdir/$settings{image}";
}
# -----------------------------------------------------------------------------
# </OTHER MEDIA>
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# <META>
# -----------------------------------------------------------------------------
# TODO: fix this crap
if (defined $settings{passon}) {
	my @passon = split /:/, $settings{passon};
	if (!$passon[0] =~ /^-/) {
		$passon[0] = "-$passon[0]";
	}
	push @args, @passon;
}
# -----------------------------------------------------------------------------
# </META>
# -----------------------------------------------------------------------------

if (!($settings{maindisk} || defined $settings{cdrom} || defined $settings{image})) {
	die 'no potential boot media found. you must specify at least one of: maindisk, cdrom, image.'
}

# Network hooks
foreach my $network_name (@networks) {
	my $network = $NETWORKS{$network_name};

	if ($network->{pre_hook}) {
		say "running pre_hook for $network_name...";
		# TODO: prettier way to do this?
		&{$network->{pre_hook}}($network);
	}
}

# TODO: handle snapshot
if ($settings{viewcmd}) {
	say "qemu-system-$settings{arch} @args";
	sleep 1;
} else {
	system "qemu-system-$settings{arch}", @args;
}

# Network hooks
foreach my $network_name (@networks) {
	my $network = $NETWORKS{$network_name};

	if ($network->{post_hook}) {
		say "running post_hook for $network_name...";
		&{$network->{post_hook}}($network);
	}
}
