#!/usr/bin/perl
# Manages virtual machines.

use strict;
use warnings;
use English;
use v5.20;
use Getopt::Long qw( :config posix_default bundling no_ignore_case );
use File::Path qw( mkpath );
# TODO: spoof mac address

my %DISPLAYS = (
	sdl     => ['-vga', 'std', '-display', 'sdl'],
	spice   => ['-vga', 'qxl', '-spice', 'port=5900,addr=127.0.0.1,disable-ticketing'],
	curses  => ['-vga', 'std', '-display', 'curses'],
	gtk     => ['-vga', 'std', '-display', 'gtk'],
	console => ['-nographic'],
	none    => ['-vga', 'none', '-display', 'none'],
);

# TODO: allow for multiple networks?
my $BRIDGE = 'br0';
my %NETWORKS = (
	none   => ['-net', 'none'],
	# TODO: use -net
	bridge => ['-netdev', "bridge,id=bridge,br=$BRIDGE", '-device', 'virtio-net,netdev=bridge'],
	# TODO: tap
	# TODO: hubport?
	# TODO: dump
	# https://www.suse.com/documentation/sles11/book_kvm/?page=/documentation/sles11/book_kvm/data/cha_qemu_running_networking.html
	user   => ['-net', 'nic', '-net', 'user'],
);

# See usage for more info.
my %PRESETS = (
	archinstall => { subdir => 'archinstall', display => 'curses', image => 'archinstall.iso' },
	blackarch   => { subdir => 'blackarch', image => 'blackarch.iso' },
	tails       => { subdir => 'tails', cdrom => 'tails.iso' },
	# TODO: metasploitable
	# TODO: xp-*
);

my %DEFAULTS = (
	arch     => 'x86_64',
	kvm      => 1,
	mem      => '6G',
	smp      => '1',
	display  => 'sdl',
	network  => 'user',
	samba    => 0,
	basedir  => $ENV{HOME} . '/vm',
	#subdir  => '<none>',
	maindisk => 0,
	makemain => 0,
	mainsize => '20G',
	snapshot => 1,
	#snaplist  not a setting
	#revert    not a setting
	#cdrom   => '<none>',
	#drives  => '<none>',
	#image   => '<none>',
);

sub usage {
	my @preset_names = keys %PRESETS;
	my @display_names = keys %DISPLAYS;
	my @network_names = keys %NETWORKS;

	$" = ', ';
	print <<HELP;
usage: vm [options]

Parameters (+ requires a value):
 NAME      DEFAULT  FLAG  OPTIONS
 preset    <none>   -p+   @preset_names
 basedir   ~/vm     -v+   directory name
 subdir    <none>   -o+   directory name

 arch      x86_64   -a+   various
 kvm       true     -k    (toggle)
 mem       6G       -m+   various
 smp       1        -s+   various
 display   sdl      -d+   @display_names
 network   user     -n+   @network_names
 samba     false    -M    (toggle)

 maindisk  false    -i    (toggle)
 makemain  false    -C    (toggle)
 mainsize  20G      -z    size of maindisk
 snapshot  true     -S    (toggle)
 snaplist           -L    (action)
 revert    <none>   -R+   snapshot to revert to

 cdrom     <none>   -c+   cdrom file
 drives    <none>   -r+   comma-separated drive files (e.g. /dev/sda)
 image     <none>   -f+   image file

 passon    <none>   -P+   dashless comma-separated flags to pass to qemu
HELP
	$" = ' ';
}

my %opts;
GetOptions(\%opts,
           'preset|p=s',
           'basedir|v=s',
           'subdir|o=s',
           'arch|a=s',
           'kvm|k!',
           'mem|m=s',
           'smp|s=s',
           'display|d=s',
           'network|n=s',
           'samba|M!',
           'maindisk|i!',
           'makemain|C!',
           'mainsize|z!',
           'snapshot|S!',
           'snaplist|L',
           'revert|R=s',
           'cdrom|c=s',
           'drives|r=s',
           'image|f=s',
           'passon|P=s',
           'help|h');

if (defined $opts{help}) {
	&usage;
	exit;
}

my %preset;
if (defined $opts{preset}) {
	my $preset = $PRESETS{$opts{preset}};
	if (!$preset) {
		die "invalid preset: $opts{preset}"
	}
	%preset = %$preset;
}

# Merge in the defaults and preset.
my %settings = (%DEFAULTS, %preset, %opts);

my ($maindisk, $vmdir, $sharedir);
if (defined $settings{subdir}) {
	$vmdir = "$settings{basedir}/$settings{subdir}";
} else {
	$vmdir = '.';
}
$maindisk = "$vmdir/maindisk.qcow2";
$sharedir = "$vmdir/shared";

# Handle snaplist command.
if (defined $opts{snaplist}) {
	# TODO: test
	die "could not read maindisk ($maindisk)" if (!-r $maindisk);
	system 'qemu-img', 'snapshot', '-l', $maindisk;
	exit;
}

# TODO: add an option to delete the last snapshot
# Handle revert command.
if (defined $opts{revert}) {
	# TODO: test
	die "could not read maindisk ($maindisk)" if (!-r $maindisk);
	system 'qemu-img', 'snapshot', '-a', $opts{revert}, $maindisk;
	exit;
}

if (!($settings{maindisk} || defined $settings{cdrom} || defined $settings{image})) {
	die 'no potential boot media found. you must specify at least one of: maindisk, cdrom, image.'
}

my @args;
# Assemble an argument list.
if ($settings{kvm}) {
	die 'KVM needs root.' if ($EUID != 0);
	push @args, '-enable-kvm'
}
push @args, '-m', $settings{mem};
push @args, '-smp', $settings{smp};
my $display = $DISPLAYS{$settings{display}};
die "invalid display: $settings{display}" if (!$display);
push @args, @$display;
# TODO: handle static ip address with route and such? and dhcp?
my $network = $NETWORKS{$settings{network}};
die "invalid network: $settings{network}" if (!$network);
push @args, @$network;
if ($settings{samba}) {
	mkpath "$sharedir";
	push @args, "-net', 'user,smb=$sharedir"
}
if ($settings{maindisk}) {
	if (!-e $maindisk) {
		if ($settings{makemain}) {
			system 'qemu-img', 'create', '-f', 'qcow2', $maindisk, $settings{mainsize};
		} else {
			die "maindisk ($maindisk) does not exist. use -C to create it."
		}
	} elsif (!-r $maindisk) {
		die "could not read maindisk ($maindisk)";
	}

	push @args, '-drive', "file=$maindisk,cache=none,if=ide"
}
if (defined $settings{cdrom}) {
	push @args, '-cdrom', "$vmdir/$settings{cdrom}";
}
if (defined $settings{drives}) {
	my @drives = split /,/, $settings{drives};
	push @args, map { ('-drive', "file=$_,cache=none,if=virtio") } @drives;
}
if (defined $settings{passon}) {
	push @args, map { "-$_" } split /,/, $settings{passon};
}
if (defined $settings{image}) {
	push @args, "$vmdir/$settings{image}";
}

# TODO: handle snapshot
system "qemu-system-$settings{arch}", @args;
